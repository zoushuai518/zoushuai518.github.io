---
layout: post
title: "PHP 类型约束"
category: php
comments: true
date:   2014-09-18 14:20:51
---

#一.PHP类型约束之定义：
PHP 从5以后 可以使用类型约束。  

<span class="impor">函数、类的成员函数</span>的参数可以指定必须为对象（在函数原型里面指定类的名字），接口，数组（PHP 5.1 起）或者 callable（PHP 5.4 起）。不过如果使用 NULL 作为参数的默认值，那么在调用函数的时候依然可以使用 NULL 作为实参。  

如果一个类或接口指定了类型约束，则其所有的子类或实现也都如此。  

使用类型约束之手，也可以同时为参数赋默认值  

类型约束不能用于标量类型如 int 或 string。Traits 也不允许。  

错误使用字符串类型约束会导致类似以下错误：
Catchable fatal error: Argument 1 passed to Models_Workflow_Instance::getRand() must be an instance of string, string given,  


#二.为什么要使用类型约束：
- 可能会导致程序逻辑异常：  
&nbsp;&nbsp;&nbsp;&nbsp;php弱数据类型的特点使得php使用起来显得简单而灵活。不过，这同样也是一把达摩克利斯之剑。也正是由于php弱数据类型的特点，在编写php程序代码时，开发人员更需要时刻注意变量数据类型的变化，尤其是变量作为函数的参数进行传递时，更需要注意这一点。毕竟，大多数的函数参数都只期望是某种特定的数据类型。但是，由于php并不是强类型的语言，也不会强制检查变量的类型，因此我们可以向函数中传递任意类型的参数，从而导致程序报错或逻辑出现异常。  
- 提高程序执行效率：  
&nbsp;&nbsp;&nbsp;&nbsp;显示指定参数类型，可以一定程度增加程序执行效率。  


#三.类型约束使用

###1.类中成员函数DEMO：
{% highlight php linenos %}
<?php

//如下面的类
class MyClass
{

	/**
	 * 测试函数
	 * 第一个参数必须为 OtherClass 类的一个对象
	 */
	public function test(OtherClass $otherclass) {
		echo $otherclass->var;
	}


	/**
	 * 另一个测试函数
	 * 第一个参数必须为数组 
	 */
	public function test_array(array $input_array) {
		print_r($input_array);
	}


	/**
	 * 第一个参数必须为递归类型
	 */
	public function test_interface(Traversable $iterator) {
		echo get_class($iterator);
	}
						
	/**
	 * 第一个参数必须为回调类型
	 */
	public function test_callable(callable $callback, $data) {
		call_user_func($callback, $data);
	}
}

// OtherClass 类定义
class OtherClass {
	public $var = 'Hello World';
}


//##########

// 两个类的对象
$myclass = new MyClass;
$otherclass = new OtherClass;

// 致命错误：第一个参数必须是 OtherClass 类的一个对象
$myclass->test('hello');

// 致命错误：第一个参数必须为 OtherClass 类的一个实例
$foo = new stdClass;
$myclass->test($foo);

// 致命错误：第一个参数不能为 null
$myclass->test(null);

// 正确：输出 Hello World 
$myclass->test($otherclass);

// 致命错误：第一个参数必须为数组
$myclass->test_array('a string');

// 正确：输出数组
$myclass->test_array(array('a', 'b', 'c'));

// 正确：输出 ArrayObject
$myclass->test_interface(new ArrayObject(array()));

// 正确：输出 int(1)
$myclass->test_callable('var_dump', 1);

?>
{% endhighlight %}


###2.函数DEMO：
类型约束不只是用在类的成员函数里，也能使用在函数里  

{% highlight php linenos %}
<?php
/**
 * [testdoc description]
 * @param  string $q
 * @param  int    $t
 * @param  array  $y
 * @param  object $o
 * @return [type]
 */
function testdoc(string $q,int $t,array $y,object $o){
	var_dump($q);
	var_dump($t);
	var_dump($y);
	var_dump($o);
}

$obj = new stdClass();
testdoc("string",5,array(1,2),$obj);

//我上面的测试代码将会报错，因为第一个参数希望是string类的实例，第二个参数希望是int类的实例，第四个参数希望是object类的实例，

//然而提供的第一个参数为string字符串，第二个为int整形，第四个为stdClass类的实例，都会报致命错误，这是由于php语言在string，int都不是对象，而在c#和java里面这样的基础类型也是对象。
?>
{% endhighlight %}


[官方解释：类型约束](http://php.net/manual/zh/language.oop5.typehinting.php)


